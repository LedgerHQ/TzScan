#######################################################
#                                                     #
#               DO NOT EDIT THIS FILE                 #
#                                                     #
#  Use ocp-autoconf to generate this file from:       #
#   * ocp-autoconf.config for the OCaml part          #
#   * ocp-autoconf.ac for autoconf parts              #
#                                                     #
#######################################################
AC_INIT(tezos-explorer,0.1)
PROJECTURE_ARGS=$*
AC_COPYRIGHT(Copyright 2011-2017 OCamlPro SAS)
OCAML_MINIMAL_VERSION=4.06.1
AC_CONFIG_MACRO_DIR([m4])

AC_ARG_ENABLE(version-check,
 [  --disable-version-check            do not check OCaml version],
 [VERSION_CHECK="$enableval"],
 [VERSION_CHECK="yes"])

AC_ARG_ENABLE(bin-annot,
 [  --disable-bin-annot            do not use -bin-annot],
 [OCAML_USE_BINANNOT=false],
 [OCAML_USE_BINANNOT=true])

AC_PROG_CC

AC_PROG_OCAML
AC_CHECK_OCAML_OS_TYPE
if test "${OCAML_OS_TYPE}" = "Win32" ; then
  OCAMLLIB="$(echo "${OCAMLLIB}" | tr -d '\015' | sed -e 's|\\|/|g')"
fi

ROOTDIR=$(dirname $(pwd))

AX_SPLIT_VERSION(OCAMLVERSION)
AC_SUBST(OCAML_MAJOR_VERSION,$AX_MAJOR_VERSION)
AC_SUBST(OCAML_MINOR_VERSION,$AX_MINOR_VERSION)
AC_SUBST(OCAML_POINT_VERSION,$AX_POINT_VERSION)
OCAMLVERSION_C=$OCAML_MAJOR_VERSION$OCAML_MINOR_VERSION$OCAML_POINT_VERSION

if test "$OCAMLC" = "no"; then
   AC_MSG_ERROR([You must install the OCaml compiler])
fi

if test "${OCAMLVERSION}" = ""; then
   AC_MSG_ERROR([No OCaml version. ocamlc -version is not parsable.])
fi

if test "$VERSION_CHECK" = "yes" ; then
  AX_COMPARE_VERSION( [$OCAMLVERSION], [lt], [${OCAML_MINIMAL_VERSION}],
  AC_MSG_ERROR([Your version of OCaml: $OCAMLVERSION is not supported. You need ${OCAML_MINIMAL_VERSION} at least.]))
fi

AX_COMPARE_VERSION( [$OCAMLVERSION], [lt], [4.03.0],
  [OCAML_USE_POSIX_TYPES=undef], [OCAML_USE_POSIX_TYPES=define])
AC_SUBST(OCAML_USE_POSIX_TYPES)

case "$OCAMLLIB" in
  */lib/ocaml)
        OCAMLBIN=`dirname $OCAMLLIB`
        OCAMLBIN=`dirname $OCAMLBIN`
        OCAMLBIN=$OCAMLBIN/bin
        ;;
  */lib)
        OCAMLBIN=`dirname $OCAMLLIB`
        OCAMLBIN=$OCAMLBIN/bin
        ;;
  *) OCAMLBIN=/usr/local/bin
  ;;
esac

ocamldir='${libdir}/ocaml'
metadir='${ocamldir}'

AC_PROG_FINDLIB
if test "${OCAMLFIND}" != "no"; then
  if test "${OCAML_OS_TYPE}" = "Win32" ; then
    metadir="$(${OCAMLFIND} -printconf destdir | tr -d '\015' | sed -e 's|\\|/|g')"
  else
    metadir="$(${OCAMLFIND} -printconf destdir)"
  fi
  echo "initializing metadir from ocamlfind config"
fi

if test "x${prefix}" = "xNONE"; then
  if test "x${OPAM_PREFIX}" != "x"; then
    echo inheriting OPAM settings from OPAM_PREFIX
    prefix="${OPAM_PREFIX}"
    ocamldir='${libdir}'
    metadir="${OPAM_PREFIX}/lib"
  else
    prefix="$(dirname ${OCAMLLIB})"
    base="$(basename ${prefix})"
    if test "x${base}" = "xlib"; then
      prefix="$(dirname ${prefix})"
    fi
  fi
fi

AC_ARG_WITH(ocamldir,
 [AS_HELP_STRING([--with-ocamldir=DIRNAME],
               [root storage of the OCaml distribution])],
 [ocamldir="${withval}"],
 [])

AC_ARG_WITH(metadir,
 [AS_HELP_STRING([--with-metadir=DIRNAME],
               [store meta files in DIRNAME])],
 [metadir="${withval}"],
 [])

AC_SUBST(ocamldir)
AC_SUBST(metadir)

AC_SUBST(CONFIGURE_ARGS)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLVERSION_C)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLBIN)
AC_PROG_CAMLP4
if test "$CAMLP4" = "no"; then
   AC_MSG_ERROR([You must install OCaml package 'camlp4'])
fi
if test "$OCAMLFIND" = "no"; then
   AC_MSG_ERROR([You must install OCaml package 'ocamlfind'])
fi
AC_CHECK_OCAML_PKG(ocp-build)
if test "$OCAML_PKG_ocp_build" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'ocp-build'.])
fi
AC_CHECK_OCAML_PKG(pgocaml)
if test "$OCAML_PKG_pgocaml" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'pgocaml'.])
fi
AC_CHECK_OCAML_PKG(curl)
if test "$OCAML_PKG_curl" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'curl'.])
fi
AC_CHECK_OCAML_PKG(js_of_ocaml)
if test "$OCAML_PKG_js_of_ocaml" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'js_of_ocaml'.])
fi
AC_CHECK_OCAML_PKG(js_of_ocaml-ppx)
if test "$OCAML_PKG_js_of_ocaml_ppx" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'js_of_ocaml-ppx'.])
fi
AC_CHECK_OCAML_PKG(js_of_ocaml-camlp4)
if test "$OCAML_PKG_js_of_ocaml_camlp4" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'js_of_ocaml-camlp4'.])
fi
AC_CHECK_OCAML_PKG(js_of_ocaml-tyxml)
if test "$OCAML_PKG_js_of_ocaml_tyxml" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'js_of_ocaml-tyxml'.])
fi
AC_CHECK_OCAML_PKG(js_of_ocaml-lwt)
if test "$OCAML_PKG_js_of_ocaml_lwt" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'js_of_ocaml-lwt'.])
fi
AC_CHECK_OCAML_PKG(omd)
if test "$OCAML_PKG_omd" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'omd'.])
fi
AC_CHECK_OCAML_PKG(cohttp-lwt)
if test "$OCAML_PKG_cohttp_lwt" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'cohttp-lwt'.])
else
  AX_COMPARE_VERSION( [$OCAML_PKG_cohttp_lwt_VERSION], [lt], [0.99.0],
     AC_MSG_WARN([BEFORE ERROR: Version >= 0.99.0 of cohttp-lwt is needed]))
fi
AC_CHECK_OCAML_PKG(cohttp-lwt-unix)
if test "$OCAML_PKG_cohttp_lwt_unix" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'cohttp-lwt-unix'.])
fi
AC_CHECK_OCAML_PKG(base64)
if test "$OCAML_PKG_base64" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'base64'.])
fi
AC_CHECK_OCAML_PKG(ezjsonm)
if test "$OCAML_PKG_ezjsonm" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'ezjsonm'.])
fi
AC_CHECK_OCAML_PKG(nocrypto)
if test "$OCAML_PKG_nocrypto" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'nocrypto'.])
fi
AC_CHECK_OCAML_PKG(zarith)
if test "$OCAML_PKG_zarith" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'zarith'.])
fi
AC_CHECK_OCAML_PKG(sodium)
if test "$OCAML_PKG_sodium" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'sodium'.])
fi
AC_CHECK_OCAML_PKG(ocplib-endian)
if test "$OCAML_PKG_ocplib_endian" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'ocplib-endian'.])
fi
AC_CHECK_OCAML_PKG(geoip)
if test "$OCAML_PKG_geoip" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'geoip'.])
fi
AC_CHECK_OCAML_PKG(csv-lwt)
if test "$OCAML_PKG_csv_lwt" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'csv-lwt'.])
fi
AC_CHECK_OCAML_PKG(lwt_log)
if test "$OCAML_PKG_lwt_log" = "no"; then
   AC_MSG_WARN([BEFORE ERROR: Please install OCaml package 'lwt_log'.])
fi
if test "$OCAML_PKG_ocp_build" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_pgocaml" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_curl" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_js_of_ocaml" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_js_of_ocaml_ppx" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_js_of_ocaml_camlp4" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_js_of_ocaml_tyxml" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_js_of_ocaml_lwt" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_omd" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_cohttp_lwt" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
  AX_COMPARE_VERSION( [$OCAML_PKG_cohttp_lwt_VERSION], [lt], [0.99.0],
     AC_MSG_FAILURE([Problems with dependencies (see warnings above)]))
if test "$OCAML_PKG_cohttp_lwt_unix" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_base64" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_ezjsonm" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_nocrypto" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_zarith" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_sodium" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_ocplib_endian" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_geoip" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_csv_lwt" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
if test "$OCAML_PKG_lwt_log" = "no"; then
   AC_MSG_FAILURE([Missing dependencies (see warnings above).])
fi
OPAM_REPO=/home/lefessan/GIT/ocp-public/opam-repository
OPAM_REPO_OFFICIAL_REMOTE=ocaml
OPAM_REPO_FORK_REMOTE=origin
DOWNLOAD_URL_PREFIX=https://gitlab.com/tzscan/tzscan/

###############################################################
##                                                            #
## From autoconf.ac:                                          #
##                                                            #
###############################################################


# This file will be inserted inside autoconf/configure.ac by ocp-autoconf
# If you create variables, do not forget to add them in ocp-autoconf.config
# in the 'extra_config_vars' and 'extra_bool_vars' options.


###############################################################
##                                                            #
## END of autoconf.ac                                         #
##                                                            #
###############################################################

AC_SUBST(CAMLP4)
AC_SUBST(CAMLP4O)
AC_SUBST(OCAMLFIND)
AC_SUBST(PROJECTURE_ARGS)
AC_SUBST(ROOTDIR)
AC_SUBST(prefix)
AC_SUBST(exec_prefix)
AC_SUBST(bindir)
AC_SUBST(libdir)
AC_SUBST(datarootdir)
AC_SUBST(mandir)
AC_SUBST(datadir)
AC_SUBST(ocamldir)
AC_SUBST(metadir)
AC_SUBST(PACKAGE_NAME)
AC_SUBST(PACKAGE_VERSION)
AC_SUBST(OPAM_REPO)
AC_SUBST(OPAM_REPO_OFFICIAL_REMOTE)
AC_SUBST(OPAM_REPO_FORK_REMOTE)
AC_SUBST(DOWNLOAD_URL_PREFIX)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLVERSION_C)
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLMKTOP)
AC_SUBST(OCAMLMKLIB)
AC_SUBST(OCAMLDOC)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLBIN)
AC_SUBST(HAS_BYTES)
AC_SUBST(OCAML_USE_BINANNOT)
AC_CONFIG_FILES(Makefile.config config.ocpgen config.ocp2gen ocaml-config.h)
AC_OUTPUT

echo
echo "Summary for ${PACKAGE_NAME}.${PACKAGE_VERSION}:"
echo "prefix=${prefix}"
echo "exec_prefix=${exec_prefix}"
echo "bindir=${bindir}"
echo "   (Executables will be installed there)"
echo "libdir=${libdir}"
echo "ocamldir=${ocamldir}"
echo "   (OCaml files will be installed there)"
echo "metadir=${metadir}"
echo "   (META files will be installed there)"
echo "datarootdir=${datarootdir}"
echo "mandir=${mandir}"
echo "   (Manual pages will be installed there)"
